buildscript {
    ext.kotlin_version = project.kotlin_version
    repositories {
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "http://repo.maven.apache.org/maven2" }
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${project.kotlin_version}"
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.0.10'
    }
}
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'kotlin'
apply plugin: "maven-publish"
apply plugin: "maven"

archivesBaseName = project.mod_name.replace(' ', '-').toLowerCase()
group = "net.ndrei"

version = "${project.minecraft_version}-${project.mod_version}"
if (project.hasProperty('mod_suffix')) {
    version += "-${project.mod_suffix}"
}

compileJava { sourceCompatibility = targetCompatibility = "1.8" }
compileKotlin { kotlinOptions { jvmTarget = "1.8" } }

minecraft {
    version = "${project.minecraft_version}-${project.forge_version}"
    mappings = "${project.mcp_version}"
    runDir = "run"

    // "stolen" from: UpcraftLP
    def username = "${mod_name}"
    if (project.hasProperty('dev_mail')) {
        username = "${project.dev_mail}"
    }
    clientRunArgs += "--username=${username}"
//    if (project.hasProperty('dev_password')) {
//        clientRunArgs += " --password=${project.dev_password}"
//    }
//     serverRunArgs += "nogui"
    // end of "stolen" part :)

    replace '@MOD-ID@', project.mod_id
    replace '@MOD-NAME@', project.mod_name
    replace '@MOD-VERSION@', project.mod_version
    replace '@MOD-MC-VERSION@', project.minecraft_version
    replace '@FORGELIN-VERSION@', project.forgelin_version
    replace '@FORGE-VERSION@', project.forge_version
    replace '@FINGERPRINT@', project.findProperty('signSHA1')

    replaceIn 'constants.kt'
}

javadoc {
    failOnError = false
}

class Secrets {
    def data = null

    def getProperty(String key) {
        return data ? data[key] : ''
    }
}

import groovy.json.JsonSlurper

def secretFile
if (System.getenv().SECRET_FILE) {
    secretFile = file System.getenv().SECRET_FILE
} else {
    secretFile = file 'secret.json'
}

project.ext.secret = new Secrets()
if (secretFile.exists()) {
    secretFile.withReader {
        project.ext.secret.data = new JsonSlurper().parse it
    }
}

// Mad hacks to make source replacements work for Kotlin
// "stolen" from: https://github.com/PaleoCrafter/VanillaImmersion/blob/ee82ecafb76659cf7d7822a722c8f63f43f41d01/build.gradle#L119-L136
import net.minecraftforge.gradle.user.TaskSourceCopy
for (set in sourceSets) {
    def taskName = "source${set.name.capitalize()}Kotlin"
    def dir = new File(project.getBuildDir(), "sources/${set.name}/kotlin")
    task(taskName, type: TaskSourceCopy) {
        source = set.getKotlin()
        output = dir
    }
    def compileTask = tasks[set.getCompileTaskName("kotlin")]
    compileTask.source = dir
    compileTask.dependsOn taskName
    def dirPath = dir.toPath()
    compileTask.include {
        return it.file.toPath().startsWith(dirPath)
    }
}
// end of "stolen" part :)

configurations {
    compile.extendsFrom exportedCompile
    deployerJars
}

repositories {
    mavenCentral()
    jcenter()
    maven { name='forgelin'; url='http://maven.shadowfacts.net' }

    mavenLocal()
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jre8:${project.kotlin_version}"
    compile "net.shadowfacts:Forgelin:${project.forgelin_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "modid", project.mod_id
    inputs.property "modname", project.mod_name

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version, 'modid': project.mod_id, 'modname': project.mod_name
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

jar {
    from sourceSets.api.output
    from sourceSets.main.output
}

task sourcesJar(type: Jar) {
    from sourceSets.api.allSource
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.api.output
    from sourceSets.main.output
    classifier = 'deobf'
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    classifier = 'api'
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing.
    // Using project.propName would cause the script to fail validation if
    // the property did not exist.
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.getDestinationDir()
}

artifacts {
    archives apiJar, sourceJar, deobfJar, javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
            artifact sourceJar {
                classifier 'sources'
            }
            artifact deobfJar {
                classifier 'deobf'
            }
            artifact javadocJar {
                classifier 'javadoc'
            }
        }
    }
    repositories {
        maven {
            credentials {
                username secret.username
                password secret.password
            }
            url secret.url
        }
    }
}

curseforge {
    if (project.hasProperty('cf_release_type') && (project.cf_release_type != "none")) {
        println("CURSE FORGE RELEASE :: $project.cf_release_type")
//        apiKey = secret.curseforgeAPIKey
//        project {
//            id = '280412'
//            changelog = file('current-changelog.txt')
//            releaseType = project.cf_release_type
//            addGameVersion(project.minecraft_version)
//            def projectName = project.mod_name
//            def displayVersion = project.mod_version
//            if (System.getenv().BUILD_NUMBER) {
//                displayVersion += '.' + System.getenv().BUILD_NUMBER
//            }
//            mainArtifact(jar) {
//                displayName = "$project.mod_name : $displayVersion"
//                relations {
//                    requiredLibrary 'shadowfacts-forgelin'
//                    optionalLibrary 'powered-thingies'
//                }
//            }
//            addArtifact(sourceJar) {
//                displayName = "$project.description $displayVersion Sources"
//            }
//            addArtifact(deobfJar) {
//                displayName = "$project.description $displayVersion Development"
//            }
//            addArtifact(javadocJar) {
//                displayName = "$project.description $displayVersion Javadoc"
//            }
//        }
    }
}
